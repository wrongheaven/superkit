package auth

import (
	"AABBCCDD/app/views/components"
	"AABBCCDD/app/views/layouts"
	v "github.com/wrongheaven/superkit/validate"
)

type LoginIndexPageData struct {
	FormValues LoginFormValues
	FormErrors v.Errors
}

type LoginFormValues struct {
	Email    string `form:"email"`
	Password string `form:"password"`
}

templ LoginIndex(data LoginIndexPageData) {
	@layouts.BaseLayout() {
		<div class="fixed top-6 right-6">
			@components.ThemeSwitcher()
		</div>
		<div class="justify-center w-full gap-10">
			<div class="mt-10 lg:mt-40">
				<div class="flex flex-col max-w-sm gap-8 px-8 py-12 mx-auto border rounded-md shadow-sm">
					<h2 class="text-2xl font-medium text-center">Login to SuperKit</h2>
					@LoginForm(data.FormValues, data.FormErrors)
					<a class="text-sm underline" href="/signup">Don't have an account? Signup here.</a>
				</div>
			</div>
		</div>
	}
}

templ LoginForm(values LoginFormValues, errors v.Errors) {
	<form hx-post="/login" class="flex flex-col gap-4">
		<div class="flex flex-col gap-1">
			<label for="email">Email *</label>
			<input { inputAttrs(errors.Has("email"))... } name="email" id="email" value={ values.Email }/>
			if errors.Has("email") {
				<div class="text-xs text-red-500">{ errors.Get("email")[0] }</div>
			}
		</div>
		<div class="flex flex-col gap-1">
			<label for="password">Password *</label>
			<input { inputAttrs(errors.Has("password"))... } type="password" name="password" id="password"/>
			if errors.Has("password") {
				<ul class="ml-4 list-disc">
					for _, err := range errors.Get("password") {
						<li class="text-xs text-red-500">password { err }</li>
					}
				</ul>
			}
			if errors.Has("credentials") {
				<div class="text-xs text-red-500">{ errors.Get("credentials")[0] }</div>
			}
			if errors.Has("verified") {
				<div class="text-xs text-red-500">{ errors.Get("verified")[0] }</div>
			}
		</div>
		<button { buttonAttrs()... }>
			Login
		</button>
	</form>
}

func buttonAttrs() templ.Attributes {
	class := "inline-flex text-primary-foreground items-center justify-center px-4 py-2 font-medium text-sm tracking-wide transition-colors duration-200 rounded-md bg-primary text-foreground hover:bg-primary/90 focus:ring focus:ring-primary focus:shadow-outline focus:outline-none"
	return templ.Attributes{
		"class": class,
	}
}

func inputAttrs(hasError bool) templ.Attributes {
	class := "flex w-full px-3 py-2 bg-transparent text-sm border rounded-md ring-offset-background placeholder:text-neutral-500 focus:border-neutral-300 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
	if hasError {
		class += " border-red-500"
	} else {
		class += " border-input"
	}
	return templ.Attributes{
		"class": class,
	}
}
